from collections import deque
from typing import Callable
import unittest


def gen_bin_tree(
    height: int = 3,
    root: int = 13,
    left_branch: Callable[[int], int] = lambda x: x + 1,
    right_branch: Callable[[int], int] = lambda x: x - 1
) -> dict:
    """
    Построение бинарного дерева (нерекурсивный вариант).

    Параметры:
        height (int): высота дерева.
        root (int): значение корня дерева.
        left_branch (Callable): функция для вычисления левого потомка.
        right_branch (Callable): функция для вычисления правого потомка.

    Возвращает:
        dict: бинарное дерево в виде словаря, где ключи — путь к узлу.
    """
    # Если высота 0 или 1 — только корень
    if height <= 1:
        return {"root": root}

    nodes = [root]
    for level in range(1, height):
        start = 2 ** (level - 1) - 1
        new_nodes = []
        for val in nodes[start:]:
            new_nodes.append(left_branch(val))
            new_nodes.append(right_branch(val))
        nodes.extend(new_nodes)

    tree = {}
    queue = deque()

    tree['root'] = nodes[0]
    queue.append(('root', 0))

    while queue:
        current_path, current_index = queue.popleft()
        left_index = 2 * current_index + 1
        right_index = 2 * current_index + 2

        if left_index < len(nodes):
            left_path = f"{current_path}.left"
            tree[left_path] = nodes[left_index]
            queue.append((left_path, left_index))

        if right_index < len(nodes):
            right_path = f"{current_path}.right"
            tree[right_path] = nodes[right_index]
            queue.append((right_path, right_index))

    return tree


class TestGenBinTree(unittest.TestCase):
    """Тесты для функции gen_bin_tree"""

    def test_height_zero(self):
        """Высота = 0 — только корень"""
        self.assertEqual(gen_bin_tree(0, 13), {"root": 13})

    def test_height_one(self):
        """Высота = 1 — только корень"""
        self.assertEqual(gen_bin_tree(1, 13), {"root": 13})

    def test_height_two(self):
        """Высота = 2 — корень и два потомка"""
        result = gen_bin_tree(2, 13)
        expected = {
            "root": 13,
            "root.left": 14,
            "root.right": 12
        }
        self.assertEqual(result, expected)


if __name__ == "__main__":
    print("Пример дерева (height=3, root=13):")
    print(gen_bin_tree(3, 13))
    print("\nЗапуск тестов...\n")
    unittest.main()
